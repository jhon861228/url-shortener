// Code generated by MockGen. DO NOT EDIT.
// Source: internal/shorturl/infrastructure/shorturl_dynamodb.go

// Package infrastructure is a generated GoMock package.
package infrastructure

import (
	reflect "reflect"
	core "url-shortener/internal/shorturl/core"

	gomock "github.com/golang/mock/gomock"
)

// MockShortUrlRepository is a mock of ShortUrlRepository interface.
type MockShortUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShortUrlRepositoryMockRecorder
}

// MockShortUrlRepositoryMockRecorder is the mock recorder for MockShortUrlRepository.
type MockShortUrlRepositoryMockRecorder struct {
	mock *MockShortUrlRepository
}

// NewMockShortUrlRepository creates a new mock instance.
func NewMockShortUrlRepository(ctrl *gomock.Controller) *MockShortUrlRepository {
	mock := &MockShortUrlRepository{ctrl: ctrl}
	mock.recorder = &MockShortUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortUrlRepository) EXPECT() *MockShortUrlRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockShortUrlRepository) GetByID(id string) (*core.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*core.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockShortUrlRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockShortUrlRepository)(nil).GetByID), id)
}

// GetByField mocks base method.
func (m *MockShortUrlRepository) GetByField(indexName string, fieldName string, fieldValue string) ([]*core.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByField", indexName, fieldName, fieldValue)
	ret0, _ := ret[0].([]*core.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockShortUrlRepositoryMockRecorder) GetByField(indexName interface{}, fieldName interface{}, fieldValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByField", reflect.TypeOf((*MockShortUrlRepository)(nil).GetByField), indexName, fieldName, fieldValue)
}

// Save mocks base method.
func (m *MockShortUrlRepository) Save(url *core.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockShortUrlRepositoryMockRecorder) Save(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockShortUrlRepository)(nil).Save), url)
}
